{
  "swagger": "2.0",
  "info": {
    "version": "2.0",
    "title": "Yext API",
    "description": "# Policies and Conventions\n\nThis section gives you the basic information you need to use our APIs.\n\n## API Availability\n\nWe currently offer three APIs:\n* **Knowledge API**\n* **Live API**\n* **Administrative API**\n\nEach API is designed for a particular set of users.\n\nTo determine which APIs are available to users like you, see the \"Overview\" page in the Docs section of this site.\n\n<a href=\"https://app.getpostman.com/run-collection/c42e6f39b0b10e56b1ca\"><img src=\"https://run.pstmn.io/button.svg\" alt=\"Run in Postman\" /></a>\n\n(Postman collection includes Knowledge API, Live API, and Administrative API calls.)\n\n## Authentication\nAll requests must be authenticated using an app’s API key via the api_key query parameter. Additionally, the API key can also be passed in as a header parameter named api-key. Note that this is slightly different from the parameter name accepted as a query param (api_key)\n\n<pre>GET https://api.yext.com/v2/accounts/[accountId]/locations?<b>api_key=API_KEY</b>&v=YYYYMMDD</pre>\n\nThe API key should be kept secret.\n\n## Versioning\nAll requests must be versioned using the **`v`** parameter.\n\n<pre>GET https://api.yext.com/v2/accounts/[accountId]/locations?api_key=API_KEY&<b>v=YYYYMMDD</b></pre>\n\nThe **`v`** parameter (a date in `YYYYMMDD` format) is designed to give you the freedom to adapt to Yext API changes on your own schedule. When you pass this parameter, any backward-incompatible changes we made to the API after the specified date will not affect the behavior of the request or the content of the response. You will still benefit from any bug fixes or backward-compatible changes we may have made after the date you've specified.\n\n**NOTE:** Yext has the ability to make changes that affect previous versions of the API, if necessary.\n\n## Serialization\nAPI v2 only accepts data in JSON format.\n\n## Content-Type Headers\nFor all requests that include a request body, the `Content-Type` header must be included and set to `application/json`.\n\n## PUT Requests\nGenerally, all `PUT` operations behave as true RESTful `PUT`s, in which entire objects are overwritten with the provided content.\n\nHowever, certain endpoints used to work with large, frequently-changing object models may have different semantics to prevent the accidental removal of content (e.g., Locations: Update lets you omit fields you don’t wish to change).\n\n## Errors and Warnings\nThere are three kinds of issues that can be reported for a given request:\n\n* **`FATAL_ERROR`**\n    * An issue caused the entire request to be rejected.\n* **`NON_FATAL_ERROR`**\n    * An item is rejected, but other items present in the request are accepted (e.g., one invalid Product List item).\n    * A field is rejected, but the item otherwise is accepted (e.g., invalid website URL in a Location).\n* **`WARNING`**\n    * The request did not adhere to our best practices or recommendations, but the data was accepted anyway (e.g., data was sent that may cause some listings to become unavailable, a deprecated API was used, or we changed the format of a field's content to meet our requirements).\n\n## Dates and Times\n* We always use milliseconds since epoch (a.k.a. Unix time) for timestamps (e.g., review creation times, webhook update times).\n* We always use ISO 8601 without timezone for local date times (e.g., Event start time, Event end time). Event times are always interpreted in the local timezone of their associated locations.\n* Dates are transmitted as strings: `YYYY-MM-DD`.\n\n## Account ID\nIn keeping with RESTful design principles, every URL in API v2 has an account ID prefix. This prefix helps to ensure that you have unique URLs for all resources.\n\nIn addition to specifying resources by explicit account ID, the following two macros are defined:\n* **`me`** - refers to the account that owns the API key sent with the request\n* **`all`** - refers to the account that owns the API key sent with the request, as well as all sub-accounts (recursively)\n\n**IMPORTANT:** The **`me`** macro is supported in all API methods.  The **`all`** macro will only be supported in certain URLs. Currently, it can only be used in Analytics, Reviews, and some Listings endpoints.\n\n### Examples\nThis URL refers to an analytics report for all locations in account 123.\n<pre>https://api.yext.com/v2/accounts/<b>123</b>/analytics/reports?api_key=456&v=20160822</pre>\n\nThis URL refers to an analytics report for all locations in the account that owns API key 456.\n<pre>https://api.yext.com/v2/accounts/<b>me</b>/analytics/reports?<b>api_key=456</b>&v=20160822</pre>\n\nThis URL refers to an analytics report for all locations in the account that owns API key 456, as well as all locations from any of its child accounts.\n<pre>https://api.yext.com/v2/accounts/<b>all</b>/analytics/reports?<b>api_key=456</b>&v=20160822</pre>\n\n## Actor Headers\n\nTo attribute changes to a particular user, all `PUT`, `POST`, and `DELETE` requests may be passed with the following headers.\n\n**NOTE:** If you choose to provide actor headers, and we are unable to authenticate the request using the values you provide, the request will result in an error and fail.\n\n* Attribute activity to customer user via username\n    * Header: `Yext-Username`\n    * Value: Customer user’s username\n* Attribute activity to customer user via Yext user ID\n    * Header: `Yext-User-Id`\n    * Value: Customer user’s Yext user ID\n\nChanges will be logged as follows:\n\n* App with no designated actor\n    * History Entry \"Updated By\" Value: `App [App ID] - ‘[App Name]’`\n    * Example: `App 432 - ‘Hello World App’`\n* App with customer user actor\n    * History Entry \"Updated By\" Value: `[user name] ([user email]) (App [App ID] - ‘[App Name]’)`\n    * Example: `Jordan Smith (jsmith@example.com) (App 432 - ‘Hello World App’)`\n\n## Response Format\n* **`meta`**\n    * Response metadata\n* **`meta.uuid`**\n    * Unique ID for this request / response\n* **`meta.errors[]`**\n    * List of errors and warnings\n* **`meta.errors[].code`**\n    * Code that uniquely identifies the error or warning\n* **`meta.errors[].type`**\n    * One of:\n        * `FATAL_ERROR`\n        * `NON_FATAL_ERROR`\n        * `WARNING`\n    * See \"Errors and Warnings\" above for details.\n* **`meta.errors[].message`**\n    * An explanation of the issue\n* **`response`**\n    * The main content (body) of the response\n\nExample:\n<pre><code>\n{\n    \"meta\": {\n        \"uuid\": \"bb0c7e19-4dc3-4891-bfa5-8593b1f124ad\",\n        \"errors\": [\n            {\n                \"code\": ...error code...,\n                \"type\": ...error, fatal error, non fatal error, or warning...,\n                \"message\": ...explanation of the issue...\n            }\n        ]\n    },\n    \"response\": {\n        ...results...\n    }\n}\n</code></pre>\n\n## Status Codes\n* `200 OK`\n   * Either there are no errors or warnings, or the only issues are of type `WARNING`.\n* `207 Multi-Status`\n    * There are errors of type `itemError` or `fieldError` (but none of type `requestError`).\n* `400 Bad Request`\n    * A parameter is invalid, or a required parameter is missing. This includes the case where no API key is provided and the case where a resource ID is specified incorrectly in a path.\n    * This status is if any of the response errors are of type `requestError`.\n* `401 Unauthorized`\n    * The API key provided is invalid.\n* `403 Forbidden`\n    * The requested information cannot be viewed by the acting user.\n* `404 Not Found`\n    * The endpoint does not exist.\n* `405 Method Not Allowed`\n    * The request is using a method that is not allowed (e.g., `POST` with a `GET`-only endpoint).\n* `409 Conflict`\n    * The request could not be completed in its current state.\n    * Use the information included in the response to modify the request and retry.\n* `429 Too Many Requests`\n    * You have exceeded your rate limit / quota.\n* `500 Internal Server Error`\n    * Yext’s servers are not operating as expected. The request is likely valid but should be resent later.\n* `504 Timeout`\n    * Yext’s servers took too long to handle this request, and it timed out.\n\n## Quotas and Rate Limits\nDefault quotas and rate limits are as follows.\n\n* **Knowledge API** *(includes Analytics, Listings, Knowledge Manager, Reviews, Social, and User endpoints)*: 5,000 requests per hour\n* **Analytics API**: 1,000 requests per 60-minute sliding window (in addition to the Knowledge API quota)\n* **Administrative API**: 1,000 requests per hour\n* **Live API**: 100,000 requests per hour\n\nWith the exception of the Analytics API quota, hourly quotas are calculated from the beginning of the hour (minute zero, `:00`), not on a rolling basis past 60 minutes.\n\n**NOTE:** Webhook requests do not count towards an account’s quota.\n\nFor the most current and accurate rate-limit usage information for a particular request type, check the **`Rate-Limit-Remaining`** and **`Rate-Limit-Limit`** HTTP headers of your API responses.\n\nIf you are currently over your limit, our API will return a `429` error, and the response object returned by our API will be empty. We will also include a **`Rate-Limit-Reset`** header in the response, which indicates when you will have additional quota.\n\n## Client- vs. Yext-assigned IDs\nYou can set the ID for the following objects when you create them. If you do not provide an ID, Yext will generate one for you.\n\n* Account\n* User\n* Location\n* Bio List\n* Menu\n* Product List\n* Event List\n* Bio List Item\n* Menu Item\n* Product List Item\n* Event List Item\n\n## Logging\nWith the exception of Live API requests, all API requests are logged. API logs can be found in your Developer Console and are stored for 30 days.\n"
  },
  "host": "liveapi.yext.com",
  "schemes": [
    "https"
  ],
  "basePath": "/v2",
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "query"
    },
    "api-key": {
      "type": "apiKey",
      "name": "api-key",
      "in": "header"
    }
  },
  "security": [
    {
      "api_key": []
    },
    {
      "api-key": []
    }
  ],
  "tags": [
    {
      "name": "Answers API"
    }
  ],
  "paths": {
    "/accounts/{accountId}/answers/autocomplete": {
      "get": {
        "operationId": "autocomplete",
        "parameters": [
          {
            "$ref": "#/parameters/accountId"
          },
          {
            "$ref": "#/parameters/v"
          },
          {
            "$ref": "#/parameters/experienceKey"
          },
          {
            "$ref": "#/parameters/locale"
          },
          {
            "$ref": "#/parameters/autocompleteInput"
          }
        ],
        "summary": "Answers: Autocomplete",
        "description": "Retrieve a list of suggested queries across all verticals in the experience based on the characters already typed by the user. This API is meant to be hit after each keystroke.",
        "responses": {
          "200": {
            "$ref": "#/responses/AutocompleteResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/accounts/{accountId}/answers/query": {
      "get": {
        "operationId": "query",
        "parameters": [
          {
            "$ref": "#/parameters/accountId"
          },
          {
            "$ref": "#/parameters/v"
          },
          {
            "$ref": "#/parameters/experienceKey"
          },
          {
            "$ref": "#/parameters/queryLocale"
          },
          {
            "$ref": "#/parameters/requiredInput"
          },
          {
            "$ref": "#/parameters/location"
          },
          {
            "$ref": "#/parameters/session_id"
          },
          {
            "$ref": "#/parameters/universalLimit"
          },
          {
            "$ref": "#/parameters/queryTrigger"
          },
          {
            "$ref": "#/parameters/context"
          },
          {
            "$ref": "#/parameters/referrerPageUrl"
          },
          {
            "$ref": "#/parameters/skipSpellCheck"
          }
        ],
        "summary": "Answers: Universal Query",
        "description": "Search for entities across all verticals within an answers experience.  Modules are returned for all verticals with relevant entities. Further fine tuning and filtering of the results can then be done using the vertical query endpoint.",
        "responses": {
          "200": {
            "$ref": "#/responses/UniversalQueryResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/accounts/{accountId}/answers/vertical/autocomplete": {
      "get": {
        "operationId": "verticalAutocomplete",
        "parameters": [
          {
            "$ref": "#/parameters/accountId"
          },
          {
            "$ref": "#/parameters/v"
          },
          {
            "$ref": "#/parameters/experienceKey"
          },
          {
            "$ref": "#/parameters/verticalKey"
          },
          {
            "$ref": "#/parameters/locale"
          },
          {
            "$ref": "#/parameters/autocompleteInput"
          }
        ],
        "summary": "Answers: Vertical Autocomplete",
        "description": "Retrieve a list of suggested queries for the selected vertical based on the characters already typed by the user or the most popular queries when no user input is given.",
        "responses": {
          "200": {
            "$ref": "#/responses/AutocompleteResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/accounts/{accountId}/answers/vertical/query": {
      "get": {
        "operationId": "verticalQuery",
        "parameters": [
          {
            "$ref": "#/parameters/accountId"
          },
          {
            "$ref": "#/parameters/v"
          },
          {
            "$ref": "#/parameters/experienceKey"
          },
          {
            "$ref": "#/parameters/verticalKey"
          },
          {
            "$ref": "#/parameters/queryLocale"
          },
          {
            "$ref": "#/parameters/verticalInput"
          },
          {
            "$ref": "#/parameters/location"
          },
          {
            "$ref": "#/parameters/locationRadius"
          },
          {
            "$ref": "#/parameters/session_id"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/queryTrigger"
          },
          {
            "$ref": "#/parameters/context"
          },
          {
            "$ref": "#/parameters/referrerPageUrl"
          },
          {
            "$ref": "#/parameters/skipSpellCheck"
          },
          {
            "$ref": "#/parameters/filters"
          },
          {
            "$ref": "#/parameters/facetFilters"
          },
          {
            "$ref": "#/parameters/retrieveFacets"
          },
          {
            "$ref": "#/parameters/sortBys"
          }
        ],
        "summary": "Answers: Vertical Query",
        "description": "Search for entities within the selected vertical.  Vertical query allows for fine tuning of the search using filters, facets and sorts passed in through the API.",
        "responses": {
          "200": {
            "$ref": "#/responses/VerticalQueryResponse"
          },
          "400": {
            "$ref": "#/responses/ErrorResponse"
          }
        }
      }
    },
    "/accounts/{accountId}/answers/filtersearch": {
      "get": {
        "operationId": "filtersearch",
        "parameters": [
          {
            "$ref": "#/parameters/accountId"
          },
          {
            "$ref": "#/parameters/v"
          },
          {
            "$ref": "#/parameters/experienceKey"
          },
          {
            "$ref": "#/parameters/locale"
          },
          {
            "$ref": "#/parameters/filterSearchVerticalKey"
          },
          {
            "$ref": "#/parameters/excluded"
          },
          {
            "$ref": "#/parameters/search_parameters"
          },
          {
            "$ref": "#/parameters/requiredInput"
          }
        ],
        "summary": "Answers: Filter Search",
        "description": "Retrieve a list of potential filters that match the user's input up to that point.  This differs from query suggest by only returning the names of filters that can be searched rather than the broader corpus of suggested queries."
      }
    }
  },
  "definitions": {
    "ResponseMeta": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string",
          "example": "4f72b877-e2d0-4de4-9324-b9cf2c03e1a0",
          "description": "Unique ID for this request / response."
        }
      }
    },
    "ResponseMetaWithError": {
      "allOf": [
        {
          "$ref": "#/definitions/ResponseMeta"
        },
        {
          "type": "object",
          "properties": {
            "errors": {
              "type": "array",
              "description": "List of errors and warnings.",
              "items": {
                "$ref": "#/definitions/ResponseError"
              }
            }
          }
        }
      ]
    },
    "ResponseError": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "description": "Code that uniquely identifies the error or warning.\n"
        },
        "type": {
          "type": "string",
          "enum": [
            "FATAL_ERROR",
            "NON_FATAL_ERROR",
            "WARNING"
          ]
        },
        "message": {
          "type": "string",
          "description": "Message explaining the problem."
        }
      }
    },
    "businessId": {
      "type": "integer",
      "description": "ID of the account associated with this Answers experience"
    },
    "queryId": {
      "type": "string",
      "description": "UUID for the query"
    },
    "resultCount": {
      "type": "integer",
      "description": "The number of entities within the vertical that are relevant to the user's query.\n"
    },
    "verticalConfigId": {
      "type": "string",
      "description": "String key that uniquely identifies the vertical."
    },
    "filter": {
      "type": "object",
      "description": "The filter, in the filter format, that was applied.\n<br><br>\nFor example: `\"c_exampleFieldId\": { $eq\": \"Answers\" }`\n",
      "example": "c_exampleFieldId: { $eq\": \"Answers\" }\n"
    },
    "AppliedQueryFilters": {
      "type": "array",
      "description": "A list of the filters that were inferred from the user's query and applied at search time.",
      "items": {
        "type": "object",
        "properties": {
          "displayKey": {
            "type": "string",
            "description": "The display name of the field to which the filter belongs."
          },
          "displayValue": {
            "type": "string",
            "description": "The value of the filter."
          },
          "filter": {
            "$ref": "#/definitions/filter"
          },
          "type": {
            "type": "string",
            "enum": [
              "FIELD_VALUE",
              "PLACE",
              "INTENT"
            ]
          },
          "details": {
            "type": "object",
            "description": "Object containing additional details relevant to the filter such as additional details about the place for `PLACE` type filters. The format of the data is dependent on the filter type."
          }
        }
      }
    },
    "DirectAnswer": {
      "type": "object",
      "description": "Information that is estimated to directly answer the question of the query.\n",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the direct answer, such as `FIELD_VALUE` or `FEATURED_SNIPPET`.\n"
        },
        "answer": {
          "type": "object",
          "description": "The data containing the main content of the direct answer. The format of the data is dependent on the direct answer type.\n"
        },
        "relatedItem": {
          "type": "object",
          "description": "An optional item that is related to the direct answer. For Knowledge Manager verticals, related items will typically be entities.\n",
          "properties": {
            "verticalConfigId": {
              "$ref": "#/definitions/verticalConfigId"
            },
            "data": {
              "type": "object",
              "description": "The data of the related item, which should be in the same shape (with possibly extra fields) as an item that appears in a section of results from the same vertical in universal search."
            }
          }
        }
      }
    },
    "Entity": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "description": "The data containing the main content of the entity. The format of the data is dependent on the entity type.\n"
        },
        "highlightedFields": {
          "type": "object",
          "description": "A map from fieldId to highlighted element.\n"
        },
        "distance": {
          "type": "integer",
          "description": "The distance in meters between the entity and the query's location bias.\n"
        },
        "distanceFromFilter": {
          "type": "integer",
          "description": "The distance in meters between the entity and the filter applied to the query."
        }
      }
    },
    "Facets": {
      "type": "object",
      "properties": {
        "fieldId": {
          "type": "string",
          "description": "The field identifier for the field being searched."
        },
        "displayName": {
          "type": "string",
          "description": "The display name for the field being searched."
        },
        "options": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "displayName": {
                "type": "string",
                "description": "The display name for the Facet option."
              },
              "count": {
                "type": "integer",
                "description": "The number of entities within the vertical that are relevant to this Facet option."
              },
              "isSelected": {
                "type": "boolean",
                "description": "A boolean indicator of whether this Facet option was used to filter results in the response."
              },
              "filter": {
                "$ref": "#/definitions/filter"
              }
            }
          }
        }
      }
    },
    "FailedVertical": {
      "type": "object",
      "properties": {
        "verticalConfigId": {
          "$ref": "#/definitions/verticalConfigId"
        },
        "errorType": {
          "type": "string",
          "description": "An identifier for the type of error causing the failure.\n",
          "enum": [
            "TIMEOUT",
            "BACKEND_ERROR",
            "INVALID_CONFIG",
            "INVALID_QUERY"
          ]
        },
        "details": {
          "type": "object",
          "properties": {
            "responseCode": {
              "type": "integer",
              "description": "An HTTP response status code indicating the completion status of the request.\n"
            },
            "description": {
              "type": "string",
              "description": "Message explaining the error."
            }
          }
        },
        "queryDurationMillis": {
          "type": "integer",
          "description": "A measure of query duration, recorded in milliseconds.\n"
        }
      }
    },
    "FailedVerticals": {
      "type": "array",
      "description": "Contains error information when one or more verticals fail to return results.\n",
      "items": {
        "$ref": "#/definitions/FailedVertical"
      }
    },
    "HighlightedValue": {
      "type": "object",
      "description": "Highlighting instructions for a field value, containing the original value of the field and all sections of the value that should be highlighted.\n",
      "properties": {
        "value": {
          "type": "string",
          "description": "The original value of the field.\n"
        },
        "matchedSubstrings": {
          "type": "array",
          "description": "The list of matched substrings within the value to highlight.\n",
          "items": {
            "type": "object",
            "description": "Highlight information for the string autocomplete value.\n",
            "properties": {
              "offsets": {
                "type": "integer",
                "description": "The zero indexed offset from the start of the value where the highlight starts.\n"
              },
              "length": {
                "type": "integer",
                "description": "The length of the highlight."
              }
            }
          }
        }
      }
    },
    "LocationBias": {
      "type": "object",
      "description": "Information about geographical location biases used in the search.",
      "properties": {
        "latitude": {
          "type": "number",
          "description": "The geographic coordinate, latitude, used to bias the search.",
          "example": 41.7828
        },
        "longitude": {
          "type": "number",
          "description": "The geographic coordinate, latitude, used to bias the search.",
          "example": -87.8781
        },
        "locationDisplayName": {
          "type": "string",
          "description": "The display name of the location.",
          "example": "Countryside, Illinois, United States"
        },
        "accuracy": {
          "type": "string",
          "description": "The accuracy of the location bias used for the search.\n<br><br>\n`DEVICE` is based on the user's device (passed in via the request param)\n<br>\n`IP` is based on the request's IP\n<br>\n",
          "enum": [
            "IP",
            "DEVICE",
            "UNKNOWN"
          ]
        }
      }
    },
    "Module": {
      "type": "object",
      "description": "The results and metadata pertaining to a single vertical relevant to the user's query.",
      "properties": {
        "verticalConfigId": {
          "$ref": "#/definitions/verticalConfigId"
        },
        "resultCount": {
          "$ref": "#/definitions/resultCount"
        },
        "encodedState": {
          "type": "string",
          "description": "Deprecated."
        },
        "results": {
          "$ref": "#/definitions/Results"
        },
        "appliedQueryFilters": {
          "$ref": "#/definitions/AppliedQueryFilters"
        }
      }
    },
    "Modules": {
      "type": "array",
      "description": "List of results for each vertical that was relevant to the query, returned in the order of relevance.",
      "items": {
        "$ref": "#/definitions/Module"
      }
    },
    "Results": {
      "type": "array",
      "description": "The individual entity results that contain metadata about the entity as well as the fully rendered profiles.\n",
      "items": {
        "$ref": "#/definitions/Entity"
      }
    },
    "SearchIntents": {
      "type": "array",
      "description": "Items in array each represent a particular intent expressed in the user's query. Example: `NEAR_ME`\n",
      "items": {
        "type": "string"
      }
    },
    "SpellCheck": {
      "type": "object",
      "description": "SpellCheck information that may correct the user's query.",
      "properties": {
        "originalQuery": {
          "type": "string",
          "description": "The unedited, original query from the request."
        },
        "correctedQuery": {
          "$ref": "#/definitions/HighlightedValue"
        },
        "type": {
          "type": "string",
          "description": "The type of SpellCheck suggestion.\n<br><br>\n`SUGGEST` is often used for \"Did you mean...\"\n<br>\n`AUTOCORRECT` is often used for \"Showing results for ... instead of ...\"\n<br>\n`COMBINE` is often used for \"Including results for ...\"\n<br><br>\n",
          "enum": [
            "SUGGEST",
            "AUTOCORRECT",
            "COMBINE"
          ]
        }
      }
    }
  },
  "parameters": {
    "accountId": {
      "name": "accountId",
      "in": "path",
      "required": true,
      "type": "string"
    },
    "v": {
      "name": "v",
      "in": "query",
      "required": true,
      "type": "string",
      "description": "A date in `YYYYMMDD` format."
    },
    "limit": {
      "name": "limit",
      "in": "query",
      "type": "integer",
      "default": 10,
      "maximum": 50,
      "description": "Number of results to return."
    },
    "filters": {
      "name": "filters",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "This parameter represents one or more filtering conditions that are applied to the set of entities that would otherwise be returned. This parameter should be provided as a URL-encoded string containing a JSON object.\n\nFor example, if the filter JSON is `{\"name\":{\"$eq\":\"John\"}}`, then the filter param after URL-encoding will be: `filter=%7B%22name%22%3A%7B%22%24eq%22%3A%22John%22%7D%7D`\n\n**Basic Filter Structure**\n\nThe filter object at its core consists of a *matcher*, a *field*, and an *argument*.\n\nFor example, in the following filter JSON:\n\n```\n{\n  \"name\":{\n    \"$eq\":\"John\"\n  }\n}\n```\n\n`$eq` is the *matcher*, or filtering operation (equals, in this example),\n\n`name` is the *field* being filtered by, and\n\n`John` is *value* to be matched against.\n\n**Combining Multiple Filters**\n\nMultiple filters can be combined to form a conjunction (AND) of disjunctions (ORs) using the *combinators* `$and` and `$or`.  For example:\n```\n{\n  \"$and\": [\n    {\n      \"$or\": [\n        {\n          \"firstName\": {\n            \"$eq\": \"Jane\"\n          }\n        },\n        {\n          \"firstName\": {\n            \"$eq\": \"John\"\n          }\n        }\n      ]\n    },\n    {\n      \"lastName\": {\n        \"$eq\": \"Smith\"\n      }\n    }\n  ]\n}\n```\nAny filter that is the only item in its respective combinator may omit the combinator as is done with the lastName above.\n\n**Filter Negation**\n\nCertain filter types may be negated. For example:\n\n```\n{\n  \"$not\" {\n    \"name\":{\n      \"$eq\":\"John\"\n    }\n  }\n}\n```\n\nThis can also be written more simply with a `!` in the `$eq` parameter. The following filter would have the same effect:\n\n```\n{\n  \"name\":{\n    \"!$eq\":\"John\"\n  }\n}\n```\n\n**TEXT**\n\nThe `TEXT` filter type is supported for text fields. (e.g., **`name`**, **`countryCode`**)\n\n<table style=\"width:100%\">\n  <tr>\n    <th>Matcher</th>\n    <th>Details</th>\n  </tr>\n  <tr>\n    <th>$eq (equals)</th>\n    <th>\n\n    {\n      \"countryCode\":{\n        \"$eq\":\"US\"\n      }\n    },\n    {\n      \"countryCode\":{\n        \"!$eq\":\"US\"\n      }\n    }\n\n  Supports negation. Case insensitive.\n  </tr>\n  <tr>\n</table>\n\n</br>\n**BOOLEAN**\n\n\nThe BOOLEAN filter type is supported for boolean fields and Yes / No custom fields.\n<table style=\"width:100%\">\n  <tr>\n    <th>Matcher</th>\n    <th>Details</th>\n  </tr>\n  <tr>\n    <th>$eq</th>\n    <th>\n\n    {\n      \"isFreeEvent\": {\n        \"$eq\": true\n      }\n    }\n\n  For booleans, the filter takes a boolean value, not a string.\n  Supports negation.\n  </tr>\n</table>\n\n</br>\n**OPTION**\n\nThe OPTION filter type is supported for option custom fields and fields that have a predetermined list of valid values.\n\n *e.g., **`eventStatus`**, **`gender`**, `SINGLE_OPTION` and `MULTI_OPTION` types of custom fields.*\n\n<table style=\"width:100%\">\n  <tr>\n    <th>Matcher</th>\n    <th>Details</th>\n  </tr>\n  <tr>\n    <th>$eq</th>\n    <th>\n\n  Matching is case insensitive and insensitive to consecutive whitespace.\n\n  e.g., \"XYZ 123\" matches \"xyz       123\"\n\n    {\n      \"eventStatus\": {\n        \"$eq\": \"SCHEDULED\"\n      }\n    }\n</table>\n\n</br>\n**INTEGER, FLOAT, DATE, DATETIME, and TIME**\n\nThese filter types are strictly ordered -- therefore, they support the following matchers:\n- Equals\n- Less Than / Less Than or Equal To\n- Greater Than / Greater Than or Equal To\n\n<table style=\"width:100%\">\n  <tr>\n    <th>Matcher</th>\n    <th>Details</th>\n  </tr>\n  <tr>\n    <th>$eq</th>\n    <th>\n\n  Equals\n\n    {\n      \"ageRange.maxValue\": {\n        \"$eq\": \"80\"\n      }\n    }\n\n  Supports negation.\n\n  </tr>\n  <tr>\n    <th>$lt</th>\n    <th>\n\n  Less than\n\n    {\n      \"time.start\": {\n        \"$lt\": \"2018-08-28T05:56\"\n      }\n    }\n\n  </tr>\n  <tr>\n    <th>$gt</th>\n    <th>\n\n  Greater than\n\n    {\n      \"ageRange.maxValue\": {\n        \"$gt\": \"50\"\n      }\n    }\n\n  </tr>\n  <tr>\n    <th>$le</th>\n    <th>\n\n  Less than or equal to\n\n    {\n      \"ageRange.maxValue\": {\n        \"$le\": \"40\"\n      }\n    }\n\n  </tr>\n  <tr>\n    <th>$ge</th>\n    <th>\n\n  Greater than or equal to\n\n    {\n      \"time.end\": {\n        \"$ge\":  \"2018-08-28T05:56\"\n      }\n    }\n\n  </tr>\n  <tr>\n    <th>$between</th>\n    <th>\n\n  An array that must contain exactly two elements with which the result is between.\n\n    {\n      \"time.end\": {\n        \"$between\":  [\"2018-08-28T05:56\", \"2018-08-29T05:56\"]\n      }\n    }\n\n  </tr>\n  <tr>\n    <th>Combinations</th>\n    <th>\n\n  In addition to between, it is possible to combine multiple matchers for a result similar to an \"and\" operation:\n\n    {\n      \"ageRange.maxValue\" : {\n        \"$gt\" : 10,\n        \"$lt\": 20\n      }\n    }\n\n  </tr>\n</table>\n\n</br>"
    },
    "facetFilters": {
      "name": "facetFilters",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "This parameter represents the state of the currently checked facet options. This parameter should be provided as a URL-encoded string containing a JSON object.\n\nThe JSON object contains a key for each facet category that has a checked facet option.  The value for each of these keys is an array of Filter objects that describe the filter that is applied by the facet option.\n\nAt the moment, facet options only support `$eq`.\n\nFor example, if `Engineering` was checked under the `Category` facet and `Chicago` and `New York` are checked under the `Job Location` facet, the `facetFilters` would look like:\n```\n{\n  \"c_jobCategory\": [\n    {\n      \"c_jobCategory\": {\n        \"$eq\": \"Engineering\"\n      }\n    }\n  ],\n  \"c_jobLocation\": [\n    {\n      \"c_jobLocation\": {\n        \"$eq\": \"Chicago\"\n      }\n    },\n    {\n      \"c_jobLocation\": {\n        \"$eq\": \"New York\"\n      }\n    }\n  ]\n}\n```"
    },
    "sortBys": {
      "name": "sortBys",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "This parameter overrides the sort options that are configured on the experience configuration.  This parameter should be provided as a URL-encoded string containing a JSON array.\n\nThe input is a JSON array containing each of the sort options in the order in which they should be applied.\n\nEach sort options must contain a `type`\n\n<table style=\"width:100%\">\n  <tr>\n    <th>Type</th>\n    <th>Details</th>\n  </tr>\n  <tr>\n    <th>RELEVANCE</th>\n    <th>Sorts based on relevance according to the algorithm and, when relevant, location bias</th>\n  </tr>\n  <tr>\n    <th>ENTITY_DISTANCE</th>\n    <th>Sorts based on entity distance alone</th>\n  </tr>\n  <tr>\n    <th>FIELD</th>\n    <th>sorts based on a field with the direction specified</th>\n  </tr>\n</table>\n\n</br>\n\nIf the `type` is `FIELD` the sort options must also specify `field` which is the api name of the field to sort on.\n\nFinally, if the `type` is `FIELD` the sort options must also specify the `direction`.\n\n<table style=\"width:100%\">\n  <tr>\n    <th>Direction</th>\n    <th>Details</th>\n  </tr>\n  <tr>\n    <th>ASC</th>\n    <th>Sorts in ascending order.  For numbers this is low to high. For text this is alphabetical.  For dates this is chronological order.</th>\n  </tr>\n  <tr>\n    <th>DESC</th>\n    <th>Sorts in ascending order.  For numbers this is high to low. For text this is reverse alphabetical.  For dates this is reverse chronological order.</th>\n  </tr>\n</table>\n\n</br>\n\n**Examples**\n```\n[\n  {\n    \"type\": \"FIELD\",\n    \"directions\": \"ASC\",\n    \"field\": \"startDate\"\n  },\n  {\n    \"type\": \"RELEVANCE\",\n    \"directions\": \"ASC\"\n  }\n]\n```"
    },
    "search_parameters": {
      "name": "search_parameters",
      "in": "query",
      "required": true,
      "type": "string",
      "description": "This parameter represents the parameters that should be used for filter search. This parameter should be provided as a URL-encoded string containing a JSON object.\n\nFilter search uses the user's input string to find a set of existing filters that match the user's input query for the fields provided in the parameters.\n\nThe parameters are made up of a list of `FilterField` objects that have the following properties:\n\n<table style=\"width:100%\">\n  <tr>\n    <th>Property</th>\n    <th>Details</th>\n  </tr>\n  <tr>\n    <th>field</th>\n    <th>The api name of the field.</th>\n  </tr>\n  <tr>\n    <th>entityTypeId</th>\n    <th>The numeric entityTypeId for the entity type the filter belongs to.</th>\n  </tr>\n  <tr>\n    <th>shouldFetchEntities</th>\n    <th>Optional boolean.  If true, entities matching each filter will be returned inline with the filter.</th>\n  </tr>\n</table>\n\n</br>\n\nAdditionally, there is an optional parameter `sectioned`.  If set to true, the matching filters will be returned in a separate section per field.  By default, they are all returned in the same section.\n"
    },
    "autocompleteInput": {
      "name": "input",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "The partial search term from the user."
    },
    "context": {
      "name": "context",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "Context is an arbitrary JSON object that is passed to query rules to be used for triggering rules as well as passing data to those rules. This parameter should be provided as a URL-encoded string containing a JSON object."
    },
    "excluded": {
      "name": "excluded",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "JSON array containing the IDs of all filters that should be excluded from filter search results (if it has already been returned and selected). This parameter should be provided as a URL-encoded string containing a JSON array."
    },
    "experienceKey": {
      "name": "experienceKey",
      "in": "query",
      "required": true,
      "type": "string",
      "description": "String key that uniquely identifies the answers experience."
    },
    "filterSearchVerticalKey": {
      "name": "verticalKey",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "String key that uniquely identifies the vertical to scope the filter search request to."
    },
    "locale": {
      "name": "locale",
      "in": "query",
      "required": true,
      "type": "string",
      "description": "The locale code of the experience (e.g. `en_GB`)."
    },
    "queryLocale": {
      "name": "locale",
      "in": "query",
      "required": true,
      "type": "string",
      "description": "The locale code of the experience (e.g. `en_GB`). Only returns entities that have an entity profile associated with this locale."
    },
    "location": {
      "name": "location",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "The user's location as a comma separated latitude and longitude (e.g. `\"40.740957,-73.987565\"`)."
    },
    "locationRadius": {
      "name": "locationRadius",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "Radius (in meters) that should be applied to any location filter that does not already have an explicit radius."
    },
    "offset": {
      "name": "offset",
      "in": "query",
      "required": false,
      "type": "integer",
      "minimum": 0,
      "maximum": 9949,
      "description": "Number of results to skip. Used to move through results.",
      "default": 0
    },
    "referrerPageUrl": {
      "name": "referrerPageUrl",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "The URL of the webpage that directed to the page this request was made from."
    },
    "requiredInput": {
      "name": "input",
      "in": "query",
      "required": true,
      "type": "string",
      "description": "The search term of the user."
    },
    "retrieveFacets": {
      "name": "retrieveFacets",
      "in": "query",
      "required": false,
      "type": "boolean",
      "description": "Whether facets should be computed for this vertical query."
    },
    "queryId": {
      "name": "queryId",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "The query ID of the last query used when paging to signify that this request is part of the same query."
    },
    "queryTrigger": {
      "name": "queryTrigger",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "String value that is logged to analytics denoting the trigger for the query.\nOptions include:\n* `suggest`, sent if the query is triggered from a spelling correction.\n* `initialize`, sent if the query is being triggered by a default initial search (in other words, the user did not enter query).\n"
    },
    "session_id": {
      "name": "session_id",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "UUID used to track session state when cookies are blocked."
    },
    "sessionTrackingEnabled": {
      "name": "sessionTrackingEnabled",
      "in": "query",
      "required": false,
      "type": "boolean",
      "description": "If true, allows for session tracking through session cookies or query parameters. Defaults to true"
    },
    "skipSpellCheck": {
      "name": "skipSpellCheck",
      "in": "query",
      "required": false,
      "type": "boolean",
      "description": "If true the query will skip spell checking."
    },
    "universalLimit": {
      "name": "limit",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "JSON object specifying the limit for each vertical.  Each key is a vertical key and the value for each of those keys is a number 1-50 that denotes the limit for that vertical. This parameter should be provided as a URL-encoded string containing a JSON object."
    },
    "version": {
      "name": "version",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "The label or version number of the experience configuration to use. If omitted the PRODUCTION label will be used."
    },
    "verticalKey": {
      "name": "verticalKey",
      "in": "query",
      "required": true,
      "type": "string",
      "description": "String key that uniquely identifies the vertical."
    },
    "verticalInput": {
      "name": "input",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "The search term of the user."
    }
  },
  "responses": {
    "EmptyResponse": {
      "description": "Empty Response.",
      "schema": {
        "title": "EmptyResponse",
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/definitions/ResponseMeta"
          },
          "response": {
            "type": "object"
          }
        }
      }
    },
    "ErrorResponse": {
      "description": "Error Response",
      "schema": {
        "title": "ErrorResponse",
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/definitions/ResponseMetaWithError"
          },
          "response": {
            "type": "object"
          }
        }
      }
    },
    "IdResponse": {
      "description": "ID Response.",
      "schema": {
        "title": "IdResponse",
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/definitions/ResponseMeta"
          },
          "response": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "AutocompleteResponse": {
      "description": "Autocomplete Request Response",
      "schema": {
        "title": "AutocompleteResponse",
        "type": "object",
        "properties": {
          "input": {
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "description": "The exact user input that triggered the autocomplete.\n"
              },
              "queryIntents": {
                "type": "array",
                "description": "List of query intents that the input has been tagged with.\n",
                "items": {
                  "type": "string",
                  "description": "Intent that was derived from the user's input.\n"
                }
              }
            }
          },
          "results": {
            "type": "array",
            "description": "The list of autocomplete results computed from the user's input.\n",
            "items": {
              "type": "object",
              "description": "An individual autocomplete match.\n",
              "properties": {
                "value": {
                  "type": "string",
                  "description": "The plain text version of the autocomplete result.\n"
                },
                "matchedSubstrings": {
                  "type": "array",
                  "description": "The list of matched substrings within the value to highlight.\n",
                  "items": {
                    "type": "object",
                    "description": "Highlight information for the string autocomplete value.\n",
                    "properties": {
                      "offsets": {
                        "type": "integer",
                        "description": "The zero indexed offset from the start of the value where the highlight starts.\n"
                      },
                      "length": {
                        "type": "integer",
                        "description": "The length of the highlight.\n"
                      }
                    }
                  }
                },
                "queryIntents": {
                  "type": "array",
                  "description": "List of query intents that the input has been tagged with.\n",
                  "items": {
                    "type": "string",
                    "description": "Intent that was derived from the user's input.\n"
                  }
                }
              }
            }
          }
        }
      },
      "examples": {
        "application/json": {
          "meta": {
            "uuid": "4f72b877-e2d0-4de4-9324-b9cf2c03e1a0",
            "errors": []
          },
          "response": {
            "input": {
              "value": "yex",
              "queryIntents": []
            },
            "results": [
              {
                "value": "Yext Search Experience Cloud",
                "matchedSubstrings": [
                  {
                    "offset": 0,
                    "length": 3
                  }
                ]
              },
              {
                "value": "Yext Answers",
                "matchedSubstrings": [
                  {
                    "offset": 0,
                    "length": 3
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "UniversalQueryResponse": {
      "description": "Universal Query Response",
      "schema": {
        "title": "UniversalQueryResponse",
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/definitions/ResponseMeta"
          },
          "response": {
            "type": "object",
            "properties": {
              "businessId": {
                "$ref": "#/definitions/businessId"
              },
              "queryId": {
                "$ref": "#/definitions/queryId"
              },
              "modules": {
                "$ref": "#/definitions/Modules"
              },
              "failedVerticals": {
                "$ref": "#/definitions/FailedVerticals"
              },
              "directAnswer": {
                "$ref": "#/definitions/DirectAnswer"
              },
              "spellCheck": {
                "$ref": "#/definitions/SpellCheck"
              },
              "locationBias": {
                "$ref": "#/definitions/LocationBias"
              }
            }
          }
        }
      }
    },
    "VerticalQueryResponse": {
      "description": "Vertical Query Response",
      "schema": {
        "title": "VerticalQueryResponse",
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/definitions/ResponseMeta"
          },
          "response": {
            "type": "object",
            "properties": {
              "businessId": {
                "$ref": "#/definitions/businessId"
              },
              "queryId": {
                "$ref": "#/definitions/queryId"
              },
              "resultsCount": {
                "$ref": "#/definitions/resultCount"
              },
              "results": {
                "$ref": "#/definitions/Results"
              },
              "appliedQueryFilters": {
                "$ref": "#/definitions/AppliedQueryFilters"
              },
              "facets": {
                "type": "array",
                "description": "Contextual facets that contain metadata about the facet as well as the full facet.",
                "items": {
                  "$ref": "#/definitions/Facets"
                }
              },
              "searchIntents": {
                "$ref": "#/definitions/SearchIntents"
              },
              "source": {
                "type": "string",
                "description": "Identifier for the backend source of the response.",
                "example": "KNOWLEDGE_MANAGER"
              },
              "directAnswer": {
                "$ref": "#/definitions/DirectAnswer"
              },
              "alternativeVerticals": {
                "type": "object",
                "description": "Response information from running this query on other verticals.",
                "properties": {
                  "modules": {
                    "$ref": "#/definitions/Modules"
                  },
                  "failedVerticals": {
                    "$ref": "#/definitions/FailedVerticals"
                  }
                }
              },
              "spellCheck": {
                "$ref": "#/definitions/SpellCheck"
              },
              "locationBias": {
                "$ref": "#/definitions/LocationBias"
              },
              "allResultsForVertical": {
                "type": "object",
                "description": "All results for this vertical.",
                "properties": {
                  "businessId": {
                    "$ref": "#/definitions/businessId"
                  },
                  "queryId": {
                    "$ref": "#/definitions/queryId"
                  },
                  "resultsCount": {
                    "$ref": "#/definitions/resultCount"
                  },
                  "results": {
                    "$ref": "#/definitions/Results"
                  },
                  "facets": {
                    "type": "array",
                    "description": "Contextual facets that contain metadata about the facet as well as the full facet.",
                    "items": {
                      "$ref": "#/definitions/Facets"
                    }
                  },
                  "searchIntents": {
                    "$ref": "#/definitions/SearchIntents"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}